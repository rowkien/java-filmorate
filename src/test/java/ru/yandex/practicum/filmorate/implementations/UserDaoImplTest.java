package ru.yandex.practicum.filmorate.implementations;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.model.User;

import java.time.LocalDate;


@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class UserDaoImplTest {

    private final UserDaoImpl userDao;

    private final JdbcTemplate jdbcTemplate;

    @BeforeEach
    public void beforeEach() {
        jdbcTemplate.update("DROP TABLE users, users_friends CASCADE");
        jdbcTemplate.update("CREATE TABLE IF NOT EXISTS users\n" +
                "(\n" +
                "user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "email VARCHAR NOT NULL,\n" +
                "login VARCHAR NOT NULL,\n" +
                "name VARCHAR NOT NULL,\n" +
                "birthday TIMESTAMP NOT NULL\n" +
                ");");
        jdbcTemplate.update("CREATE TABLE IF NOT EXISTS users_friends\n" +
                "(\n" +
                "user_id INTEGER REFERENCES users (user_id),\n" +
                "friend_id INTEGER REFERENCES users (user_id)\n" +
                ");");
    }

    @Test
    public void shouldCorrectlyCreateUser() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        Assertions.assertEquals(1, user.getId());
    }

    @Test
    public void shouldCorrectlyUpdateUser() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        user.setName("updatedName");
        userDao.updateUser(user);
        Assertions.assertEquals("updatedName", user.getName());
    }

    @Test
    public void shouldCorrectlyGetUser() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        User returnedUser = userDao.getUser(user.getId());
        Assertions.assertEquals(user, returnedUser);
    }

    @Test
    public void shouldCorrectlyGetAllUsers() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        Assertions.assertEquals(1, userDao.getAllUsers().size());
    }

    @Test
    public void shouldCorrectlyAddFriend() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        User friend = new User(1, "friend@mail.ru", "friendLogin", "friendName", LocalDate.of(1963, 5, 14));
        userDao.createUser(friend);
        userDao.addFriend(user.getId(), friend.getId());
        Assertions.assertEquals(1, userDao.getUserFriends(user.getId()).size());
    }

    @Test
    public void shouldCorrectlyGetUserFriends() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        User friend = new User(1, "friend@mail.ru", "friendLogin", "friendName", LocalDate.of(1963, 5, 14));
        userDao.createUser(friend);
        userDao.addFriend(user.getId(), friend.getId());
        Assertions.assertEquals(friend, userDao.getUserFriends(user.getId()).get(0));
    }

    @Test
    public void shouldCorrectlyDeleteFriend() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        User friend = new User(1, "friend@mail.ru", "friendLogin", "friendName", LocalDate.of(1963, 5, 14));
        userDao.createUser(friend);
        userDao.addFriend(user.getId(), friend.getId());
        userDao.deleteFriend(user.getId(), friend.getId());
        Assertions.assertEquals(0, userDao.getUserFriends(user.getId()).size());
    }

    @Test
    public void shouldCorrectlyGetCommonFriends() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        User friend = new User(1, "friend@mail.ru", "friendLogin", "friendName", LocalDate.of(1963, 5, 14));
        userDao.createUser(friend);
        User common = new User(2, "common@mail.ru", "commonLogin", "commonName", LocalDate.of(1967, 9, 1));
        userDao.createUser(common);
        userDao.addFriend(user.getId(), friend.getId());
        userDao.addFriend(common.getId(), friend.getId());
        Assertions.assertEquals(friend, userDao.getCommonFriends(user.getId(), common.getId()).get(0));
    }
}