package ru.yandex.practicum.filmorate.implementations;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Mpa;
import ru.yandex.practicum.filmorate.model.User;

import java.time.LocalDate;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class FilmDaoImplTest {

    private final FilmDaoImpl filmDao;

    private final UserDaoImpl userDao;
    private final JdbcTemplate jdbcTemplate;

    @BeforeEach
    public void beforeEach() {
        jdbcTemplate.update("DROP TABLE films, films_likes, films_genre CASCADE");
        jdbcTemplate.update("CREATE TABLE IF NOT EXISTS films\n" +
                "(\n" +
                "film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "name VARCHAR NOT NULL,\n" +
                "description VARCHAR NOT NULL,\n" +
                "duration INTEGER NOT NULL,\n" +
                "release_date TIMESTAMP NOT NULL,\n" +
                "mpa_id INTEGER NOT NULL REFERENCES mpa (mpa_id)\n" +
                ");");
        jdbcTemplate.update("CREATE TABLE IF NOT EXISTS films_likes\n" +
                "(\n" +
                "film_id INTEGER REFERENCES films (film_id),\n" +
                "user_id INTEGER REFERENCES users (user_id)\n" +
                ");");
        jdbcTemplate.update("CREATE TABLE IF NOT EXISTS films_genre\n" +
                "(\n" +
                "film_id INTEGER REFERENCES films (film_id),\n" +
                "genre_id INTEGER REFERENCES genre (genre_id)\n" +
                ");");
    }

    @Test
    public void shouldCorrectlyCreateFilm() {
        Film film = Film.builder()
                .id(0)
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        Assertions.assertEquals(1, film.getId());
    }

    @Test
    public void shouldCorrectlyUpdateFilm() {
        Film film = Film.builder()
                .id(0)
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        film.setMpa(new Mpa(2, "Драма"));
        filmDao.updateFilm(film);
        Assertions.assertEquals(new Mpa(2, "Драма"), film.getMpa());
    }

    @Test
    public void shouldCorrectlyGetFilm() {
        Film film = Film.builder()
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        Assertions.assertEquals(1, filmDao.getFilm(film.getId()).getId());
    }

    @Test
    public void shouldCorrectlyGetAllFilms() {
        Film film = Film.builder()
                .id(0)
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        Assertions.assertEquals(film.getId(), filmDao.getAllFilms().get(0).getId());
    }

    @Test
    public void shouldCorrectlyAddLike() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        Film film = Film.builder()
                .id(0)
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        Film likedFilm = Film.builder()
                .id(1)
                .name("likedFilm")
                .description("likedDescription")
                .duration(130)
                .releaseDate(LocalDate.of(1994, 1, 17))
                .mpa(new Mpa(2, "PG"))
                .build();
        filmDao.createFilm(likedFilm);
        filmDao.addLike(likedFilm.getId(), user.getId());
        Assertions.assertEquals(likedFilm, filmDao.getMostLikedFilms(1).get(0));
    }

    @Test
    public void shouldCorrectlyRemoveLike() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        Film film = Film.builder()
                .id(0)
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        Film likedFilm = Film.builder()
                .id(1)
                .name("likedFilm")
                .description("likedDescription")
                .duration(130)
                .releaseDate(LocalDate.of(1994, 1, 17))
                .mpa(new Mpa(2, "PG"))
                .build();
        filmDao.createFilm(likedFilm);
        filmDao.addLike(likedFilm.getId(), user.getId());
        filmDao.removeLike(likedFilm.getId(), user.getId());
        Assertions.assertEquals(film.getId(), filmDao.getMostLikedFilms(1).get(0).getId());
    }

    @Test
    public void shouldCorrectlyGetMostLikedFilms() {
        User user = new User(0, "test@mail.ru", "testLogin", "testName", LocalDate.of(1961, 4, 12));
        userDao.createUser(user);
        User secondUser = new User(1, "second@mail.ru", "secondLogin", "secondName", LocalDate.of(1963, 5, 17));
        userDao.createUser(secondUser);
        Film film = Film.builder()
                .id(0)
                .name("testFilm")
                .description("testDescription")
                .duration(120)
                .releaseDate(LocalDate.of(1997, 5, 19))
                .mpa(new Mpa(1, "G"))
                .build();
        filmDao.createFilm(film);
        Film likedFilm = Film.builder()
                .id(1)
                .name("likedFilm")
                .description("likedDescription")
                .duration(130)
                .releaseDate(LocalDate.of(1994, 1, 17))
                .mpa(new Mpa(2, "PG"))
                .build();
        filmDao.createFilm(likedFilm);
        filmDao.addLike(likedFilm.getId(), user.getId());
        filmDao.addLike(likedFilm.getId(), secondUser.getId());
        Assertions.assertEquals(likedFilm, filmDao.getMostLikedFilms(2).get(0));
    }
}